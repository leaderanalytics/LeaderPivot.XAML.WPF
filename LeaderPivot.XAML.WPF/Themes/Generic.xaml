<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
    xmlns:Behaviors="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:local="clr-namespace:LeaderAnalytics.LeaderPivot.XAML.WPF"
    xmlns:converters="clr-namespace:LeaderAnalytics.LeaderPivot.XAML.WPF.Converters">
    
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:BoolToStretchConverter x:Key="BoolToStretchConverter"/>
    <converters:SelectedItemConverter x:Key="SelectedItemConverter" />
    <converters:NegateConverter x:Key="NegateConverter"/>
    <converters:DimensionEventArgsConverter x:Key="DimensionEventArgsConverter"/>
    <converters:DimensionEventCheckedConverter x:Key="DimensionEventCheckedConverter"/>
    <converters:DimensionEventEnabledConverter x:Key="DimensionEventEnabledConverter"/>
    <converters:DimensionActionDescriptionConverter x:Key="DimensionActionDescriptionConverter"/>
    
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <Style TargetType="local:DropDownButton" x:Key="DropDownButtonStyle">
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Margin" Value="0,0,6,0" />
    </Style>
        
    <Style TargetType="Button" x:Key="ReloadButtonStyle">
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="LeftTextBlockStyle">
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style TargetType="TextBlock" x:Key="RightTextBlockStyle">
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
    </Style>

    <Style TargetType="{x:Type local:LeaderPivotControl}" >
        <Setter Property="CellBorderBrush" Value="Black"/>
        <Setter Property="CellBorderThickness" Value=".5"/>
        <Setter Property="CellPadding" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LeaderPivotControl}" >
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="Top" HorizontalAlignment="Left">
                            
                        <Border BorderBrush="{TemplateBinding CellBorderBrush}"
                                BorderThickness="{TemplateBinding CellBorderThickness}"
                                DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}}" >

                            <ScrollViewer x:Name="ContentScrollViewer" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                <Grid x:Name="PART_Grid" />
                            </ScrollViewer>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type local:CellContainer}">
        <Setter Property="Margin" Value="0.00"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CellContainer }">
                    <!-- This border provides uniform BorderBrush and BorderThickness only. --> 
                    <Border Background="Transparent" Padding="0" SnapsToDevicePixels="True"
                            BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=CellBorderBrush}"
                            BorderThickness="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=CellBorderThickness}"
                            DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:BaseCell}" x:Key="BaseCellStyle">
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource RightTextBlockStyle}"></Style>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BaseCell }">
                    <!-- This border provides cell-specific background. Also proives padding based on value provided by LeaderPivotControl  -->
                    <Border Background="{TemplateBinding Background}" BorderThickness="0" SnapsToDevicePixels="True"
                            Padding="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=CellPadding}">
                        <TextBlock Text="{TemplateBinding Content}" Padding="{Binding Padding}" FontSize="{Binding FontSize}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type local:BaseCell}" BasedOn="{StaticResource BaseCellStyle}" x:Key="BaseTotalCellStyle">
        <Setter Property="Background" Value="LightGray"/>
    </Style>

    <Style TargetType="local:MeasureCell" BasedOn="{StaticResource BaseCellStyle}">
    </Style>

    <Style TargetType="{x:Type local:TotalCell}"  BasedOn="{StaticResource BaseTotalCellStyle}">
    </Style>
    
    <Style TargetType="{x:Type local:GrandTotalCell}"  BasedOn="{StaticResource BaseTotalCellStyle}">
    </Style>
    
    <Style TargetType="{x:Type local:MeasureLabelCell }"  BasedOn="{StaticResource BaseCellStyle}">
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type local:MeasureTotalLabelCell }"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type local:TotalHeaderCell}"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type local:GrandTotalHeaderCell}"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type local:GroupHeaderCell}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GroupHeaderCell}">
                    <Border Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                            BorderThickness="0"
                            Padding="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=CellPadding}"
                            DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}}">
                        <StackPanel Orientation="Horizontal">
                            
                            <Button 
                                DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:GroupHeaderCell}}"
                                Command="{Binding ToggleNodeExpansionCommand}" 
                                CommandParameter="{Binding NodeID}"
                                Visibility="{Binding CanToggleExpansion, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="45"/>
                                    </Style>
                                    <Style TargetType="Button">
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=local:GroupHeaderCell}, Path=Foreground}"/>
                                        <Setter Property="Height" Value="25"/>
                                        <Setter Property="Width" Value="25"/>
                                        <Setter Property="HorizontalAlignment" Value="Left"/>
                                        <Setter Property="VerticalAlignment" Value="top"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
                                        
                                        <Setter Property="FontSize" Value="12"/>
                                        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
                                        <Setter Property="Margin" Value="3"/>
                                       
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                                                <Setter Property="Padding" Value="5,7,5,3"/>
                                                <Setter Property="Content" Value="&#xE936;"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsExpanded}" Value="False">
                                                <Setter Property="Padding" Value="9,4,1,6"/>
                                                <Setter Property="Content" Value="&#xE937;"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Resources>
                            </Button>
                            <TextBlock Text="{TemplateBinding Content}" Padding="{Binding Padding}" Margin="0,6,0,0" FontSize="{Binding FontSize}"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type local:DimensionContainerCell }">
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DimensionContainerCell}" >
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            Padding="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=CellPadding}"
                            DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}}">

                        <ScrollViewer 
                            Visibility="{Binding DisplayDimensionButtons, Converter={StaticResource BooleanToVisibilityConverter}}"  
                            VerticalScrollBarVisibility="Auto"
                            HorizontalScrollBarVisibility="Auto"
                            HorizontalAlignment="Left">
                            <ItemsControl Name="DimensionItems" 
                                          ItemsSource="{TemplateBinding Dimensions}"  
                                          dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" 
                                          dd:DragDrop.DropHandler="{Binding}" 
                                          dd:DragDrop.DragHandler="{Binding}" 
                                          dd:DragDrop.UseDefaultDragAdorner="True"  >
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <local:DimensionButton 
                                            Content="{Binding DisplayValue}" 
                                            Dimension="{Binding}" 
                                            SelectionChangedCommand="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=DimensionEventCommand}" >
                                        </local:DimensionButton>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" ></StackPanel>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type local:MeasureContainerCell }">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MeasureContainerCell}" >
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            Padding="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=CellPadding}"
                            DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}}">
                        <ScrollViewer x:Name="ContentScrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                            <Grid x:Name="PART_Grid">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Button Content="Reload Data" 
                                        Style="{TemplateBinding ReloadButtonStyle}" Height="25" Width="80"
                                        Command="{Binding ReloadDataCommand}" 
                                        Visibility="{Binding DisplayReloadDataButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                <ItemsControl ItemsSource="{Binding ViewBuilder.Measures}" Grid.Row="1" Margin="3,10,0,0"
                                              Visibility="{Binding DisplayMeasureSelectors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <CheckBox 
                                                Content="{Binding Item.DisplayValue}" 
                                                IsChecked="{Binding IsSelected }" 
                                                Command="{Binding RelativeSource={RelativeSource AncestorType=local:LeaderPivotControl}, Path=ToggleMeasureEnabledCommand}" 
                                                CommandParameter="{Binding}"
                                                Style="{Binding RelativeSource={RelativeSource AncestorType=local:MeasureContainerCell}, Path=MeasureCheckBoxStyle}" Padding="2" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <CheckBox Content="Grand Totals" Margin="3,0,0,0"
                                          IsChecked="{Binding ViewBuilder.DisplayGrandTotals}" Command="{Binding ReloadDataCommand}" Padding="2" 
                                          Visibility="{Binding DisplayGrandTotalOption, Converter={StaticResource BooleanToVisibilityConverter}}"
                                          Style="{TemplateBinding MeasureCheckBoxStyle}"
                                          Grid.Row="2" />
                                
                                <local:DimensionContainerCell BorderThickness="0" Margin="0,3,0,0"
                                    IsRows="True" 
                                    Dimensions="{Binding ViewBuilder.RowDimensions}" 
                                    Grid.Row="3"/>

                                <ComboBox Grid.Row="4" x:Name="HiddenDimensionsComboBox" 
                                          Style="{TemplateBinding HiddenDimensionsListBoxStyle}"
                                          Padding="6" Margin="0,6,0,6"
                                          Text="Hidden Dimensions" 
                                          IsReadOnly="True" IsEditable="True"
                                          DisplayMemberPath="DisplayValue"
                                          Visibility="{Binding ViewBuilder.HiddenDimensionsVisibility}"
                                          ItemsSource="{Binding ViewBuilder.HiddenDimensions}"
                                          SelectedItem="{x:Null}">
                                    <Behaviors:Interaction.Triggers>
                                        <Behaviors:EventTrigger EventName="SelectionChanged">
                                            <Behaviors:InvokeCommandAction Command="{Binding DimensionEventCommand}">
                                                <Behaviors:InvokeCommandAction.CommandParameter>
                                                    <MultiBinding Converter="{StaticResource DimensionEventArgsConverter}">
                                                        <Binding ElementName="HiddenDimensionsComboBox" Path="SelectedItem" />
                                                        <Binding >
                                                            <Binding.Source>
                                                                <x:Static Member="local:DimensionAction.UnHide"/>
                                                            </Binding.Source>
                                                        </Binding>
                                                    </MultiBinding>
                                                </Behaviors:InvokeCommandAction.CommandParameter>
                                            </Behaviors:InvokeCommandAction>
                                        </Behaviors:EventTrigger>
                                    </Behaviors:Interaction.Triggers>
                                </ComboBox>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="DimensionButtonItemTemplate">
        <Border Margin="2,3,2,3">
            <CheckBox HorizontalAlignment="Left" VerticalAlignment="Center"
                          Command="{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}, Path=CheckboxCheckedCommand}"
                          CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                          Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, Converter={StaticResource DimensionActionDescriptionConverter}}">

                <CheckBox.IsChecked>
                    <MultiBinding Converter="{StaticResource DimensionEventCheckedConverter}" Mode="OneWay" >
                        <Binding RelativeSource="{RelativeSource AncestorType=local:DimensionButton}" Path="Dimension" Mode="OneWay" />
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Content" Mode="OneWay"  />
                    </MultiBinding>
                </CheckBox.IsChecked>
                <CheckBox.IsEnabled>
                    <MultiBinding Converter="{StaticResource DimensionEventEnabledConverter}" Mode="OneWay">
                        <Binding RelativeSource="{RelativeSource AncestorType=ListBoxItem}" Path="Content" />
                        <Binding RelativeSource="{RelativeSource AncestorType=local:DimensionContainerCell}" Path="." />
                    </MultiBinding>
                </CheckBox.IsEnabled>
            </CheckBox>
        </Border>
    </DataTemplate>

    <Style TargetType="{x:Type local:DimensionButton}">
        <Style.Resources>
            <Style TargetType="local:DropDownButton">
                <Setter Property="Margin" Value="6"/>
            </Style>
        </Style.Resources>
        <Setter Property="PopupStyle">
            <Setter.Value>
                <Style TargetType="Popup">
                    <Setter Property="AllowsTransparency" Value="True"/>
                    <Setter Property="VerticalOffset" Value="0"/>
                    <Setter Property="StaysOpen" Value="True"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ButtonStyle">
            <Setter.Value>
                <Style TargetType="Button">
                    <Setter Property="Padding" Value="6"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="5" Opacity="0.4"/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DimensionButton}">
                        <local:DropDownButton
                            DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}}"
                            ItemTemplate="{StaticResource DimensionButtonItemTemplate}"
                            Command="{Binding Command}"
                            Content="{Binding Content}" 
                            SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
                            ButtonStyle="{Binding ButtonStyle}"
                            ListBoxStyle="{Binding ListBoxStyle}"
                            ListBoxItemStyle="{Binding ListBoxItemStyle}"
                            PopupStyle="{Binding PopupStyle}">
                        
                        <local:DropDownButton.ItemsSource>
                            <x:Array Type="{x:Type local:DimensionAction}">
                                <x:Static Member="local:DimensionAction.SortAscending"/>
                                <x:Static Member="local:DimensionAction.SortDescending"/>
                                <x:Static Member="local:DimensionAction.Hide"/>
                            </x:Array>
                        </local:DropDownButton.ItemsSource>
                        <Behaviors:Interaction.Triggers>
                            <Behaviors:EventTrigger EventName="SelectionChanged">
                                <Behaviors:InvokeCommandAction Command="{Binding SelectionChangedCommand}" CommandParameter="{Binding CommandParameter}"  />
                            </Behaviors:EventTrigger>
                        </Behaviors:Interaction.Triggers>
                    </local:DropDownButton>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CommandParameter">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource DimensionEventArgsConverter}" Mode="OneWay">
                    <Binding RelativeSource="{RelativeSource Self}" Path="Dimension" />
                    <Binding RelativeSource="{RelativeSource Self}" Path="SelectedItem" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:DropDownButton">
        <Setter Property="ButtonStyle">
            <Setter.Value>
                <Style TargetType="Button">
                    <Setter Property="Padding" Value="6"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="5" Opacity="0.4"/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DropDownButton }">
                    <StackPanel Orientation="Vertical" DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:DropDownButton}}">
                        <StackPanel.Resources>
                            <Style TargetType="Popup">
                                <Setter Property="AllowsTransparency" Value="True"/>
                                <Setter Property="Placement" Value="Bottom"/>
                            </Style>
                        </StackPanel.Resources>
                        <Behaviors:Interaction.Triggers>
                            <Behaviors:EventTrigger EventName="MouseLeave">
                                <Behaviors:InvokeCommandAction Command="{Binding MouseLeaveCommand}"/>
                            </Behaviors:EventTrigger>
                        </Behaviors:Interaction.Triggers>
                        <Button x:Name="MartyMcButton" Style="{TemplateBinding ButtonStyle}" Content="{TemplateBinding Content}" Command="{Binding ToggleDropDownCommand}"></Button>
                        <Popup IsOpen="{Binding IsDropDownOpen}" PlacementTarget="{Binding ElementName=MartyMcButton}" Style="{Binding PopupStyle}">
                            <Border Margin="0,0,8,8" Padding="{Binding PopupPadding}" >
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="5" Opacity="0.4"/>
                                </Border.Effect>
                                <ListBox x:Name="PART_ListBox" 
                                         ItemsSource="{Binding ItemsSource}" 
                                         SelectedItem="{Binding SelectedItem, Mode=TwoWay}" 
                                         ItemTemplate="{Binding ItemTemplate}" 
                                         Style="{TemplateBinding ListBoxStyle}" ItemContainerStyle="{TemplateBinding ListBoxItemStyle}" >
                                    <Behaviors:Interaction.Triggers>
                                        <Behaviors:EventTrigger EventName="SelectionChanged">
                                            <Behaviors:ChangePropertyAction PropertyName="IsDropDownOpen" TargetObject="{Binding RelativeSource={RelativeSource AncestorType=local:DropDownButton}}" Value="False"/>
                                            <Behaviors:InvokeCommandAction Command="{Binding SelectionChangedCommand}"  />
                                        </Behaviors:EventTrigger>
                                    </Behaviors:Interaction.Triggers>
                                </ListBox>
                            </Border>
                        </Popup>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
